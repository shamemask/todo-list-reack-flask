file Dockerfile
'''


# Базовый образ
FROM node:20

# Создание директории приложения
WORKDIR /app

# Копирование файлов проекта в контейнер
COPY . .

# Установка зависимостей
RUN npm install npm@9.6.5
RUN npm install react-devtools@4.27.4
RUN npm install

# Открытие порта для доступа к приложению
EXPOSE 3000

# Настройка команды запуска приложения в контейнере

CMD ["npm","start"]

# Базовый образ
FROM python:3.9

# Установим зависимости
RUN apt-get update -y && apt-get install -y postgresql postgresql-contrib libpq-dev nginx

# Создаем директорию приложения и перемещаемся в нее 
WORKDIR /app

# Копируем файлы приложения в контейнер
COPY . /app

# Устанавливаем Python зависимости
RUN python -m pip install --upgrade pip && pip install -r requirements.txt
   
# Запускаем PostgreSQL и создаем базу данных, пользователя и миграции
RUN service postgresql start && sleep 5 && \
    # su - postgres -c "psql -c 'CREATE DATABASE postgres'" && \
    # su - postgres -c "psql -c 'CREATE USER postgres WITH PASSWORD '\''123'\'''" && \
    # su - postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE postgres TO postgres \"" && \
    su - postgres -c "psql -c 'ALTER USER postgres WITH PASSWORD '\''123'\'''" && \
    flask db init && \
    flask db migrate && \
    flask db upgrade


# Открываем порт 5000 для Nginx
EXPOSE 5000

# Запускаем Nginx и Gunicorn
CMD npm start && service postgresql start && service nginx start && gunicorn --bind 0.0.0.0:5000 wsgi:app

'''

file backend\Dockerfile
'''
# Базовый образ
FROM python:3.9

# Установим зависимости
RUN apt-get update -y && apt-get install -y postgresql postgresql-contrib libpq-dev nginx

# Создаем директорию приложения и перемещаемся в нее 
WORKDIR /app

# Копируем файлы приложения в контейнер
COPY . /app

# Устанавливаем Python зависимости
RUN python -m pip install --upgrade pip && pip install -r requirements.txt
   
# Запускаем PostgreSQL и создаем базу данных, пользователя и миграции
RUN service postgresql start && sleep 5 && \
    # su - postgres -c "psql -c 'CREATE DATABASE postgres'" && \
    # su - postgres -c "psql -c 'CREATE USER postgres WITH PASSWORD '\''123'\'''" && \
    # su - postgres -c "psql -c \"GRANT ALL PRIVILEGES ON DATABASE postgres TO postgres \"" && \
    su - postgres -c "psql -c 'ALTER USER postgres WITH PASSWORD '\''123'\'''" && \
    flask db init && \
    flask db migrate && \
    flask db upgrade


# Открываем порт 5000 для Nginx
EXPOSE 5000

# Запускаем Nginx и Gunicorn
CMD service postgresql start && service nginx start && gunicorn --bind 0.0.0.0:5000 wsgi:app

'''

file backend\manage.py
'''
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_cors import CORS
import eventlet
eventlet.monkey_patch()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:123@localhost:5432/postgres'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy()
db.init_app(app)
migrate = Migrate(app, db)
cors = CORS(app, resources={r"/api/*": {"origins": "*"}}, expose_headers='x-total-count')

class Todo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120))
    email = db.Column(db.String(120))
    text = db.Column(db.String(120))
    done = db.Column(db.Boolean) 

    def __init__(self, name, email, text, done=False):
        self.name = name
        self.email = email
        self.text = text
        self.done = done

    def serialize(self):
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'text': self.text,
            'done': self.done,
        }

# Получить все задачи
@app.route('/api/todos')
def get_todos():
    page = int(request.args.get('_page', 1))
    limit = int(request.args.get('_limit', 3))
    sortField = request.args.get('_sort', 'id')
    sortOrder = request.args.get('_order', 'asc')
    todos_query = Todo.query.order_by(db.text(f'{sortField} {sortOrder}')).paginate(page=page, per_page=limit, error_out=False)
    totalCount = todos_query.total
    todos = [todo.serialize() for todo in todos_query.items]
    response = jsonify(todos)
    response.headers.add('x-total-count', totalCount)
    return response

# Получить задачу по ID
@app.route('/api/todos/<int:id>')
def get_todo_by_id(id):
    todo = Todo.query.get(id)
    return jsonify(todo.serialize())

# Добавить задачу
@app.route('/api/todos', methods=['POST'])
def create_todo():
    name = request.json['name']
    email = request.json['email']
    text = request.json['text']

    todo = Todo(name=name, email=email, text=text, done=False)
    db.session.add(todo)
    db.session.commit()

    return jsonify(todo.serialize())

# Обновить задачу
@app.route('/api/todos/<int:id>', methods=['PUT'])
def update_todo_by_id(id):
    todo = Todo.query.get(id)

    if 'text' in request.json:
        todo.text = request.json['text']
    if 'done' in request.json:
        todo.done = request.json['done']

    db.session.commit()

    return jsonify(todo.serialize())

# Удалить задачу
@app.route('/api/todos/<int:id>', methods=['DELETE'])
def delete_todo_by_id(id):
    todo = Todo.query.get(id)
    db.session.delete(todo)
    db.session.commit()

    return jsonify(todo.serialize())

if __name__ == '__main__':
    app.run(debug=True)
'''

file backend\wsgi.py
'''
from manage import app
from eventlet import wsgi, listen

if __name__ == '__main__':
    wsgi.server(listen(('0.0.0.0', 5000)), app)
'''

file frontend\Dockerfile
'''
# Базовый образ
FROM node:20

# Создание директории приложения
WORKDIR /app

# Копирование файлов проекта в контейнер
COPY . .

# Установка зависимостей
RUN npm install npm@9.6.5
RUN npm install react-devtools@4.27.4
RUN npm install

# Открытие порта для доступа к приложению
EXPOSE 3000

# Настройка команды запуска приложения в контейнере

CMD ["npm","start"]
'''

file frontend\src\App.test.js
'''
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''

file frontend\src\config.js
'''
export const API_URL = 'http://localhost:5000';//'https://todo-shamemask.b4a.run';
'''

file frontend\src\index.js
'''
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import configureStore from './store/configureStore';
import App from './components/App';
import './index.css';

const store = configureStore();

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
); 
'''

file frontend\src\reportWebVitals.js
'''
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''

file frontend\src\setupProxy.js
'''
const { createProxyMiddleware } = require('http-proxy-middleware');
import { API_URL } from '../config';
module.exports = function(app) {
  app.use(
    '/api',
    createProxyMiddleware({
      target: API_URL,
      changeOrigin: true
    })
  );
}; 
'''

file frontend\src\setupTests.js
'''
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''

file frontend\src\actions\todosActions.js
'''
import axios from 'axios';
import {
  FETCH_TODOS,
  FETCH_TODO_BY_ID,
  UPDATE_TODO,
  CREATE_TODO
} from './types';
import { API_URL } from '../config';

axios.defaults.baseURL = API_URL;

export const fetchTodos = (page = 1, sortField = 'id', sortOrder = 'asc') => async dispatch => {
  try {
    const res = await axios.get(`/api/todos?_page=${page}&_limit=3&_sort=${sortField}&_order=${sortOrder}`);
    const totalCount = await res.headers['x-total-count'];
    dispatch({
      type: FETCH_TODOS,
      payload: { data: res.data, page, totalCount }
    });
  } catch (err) {
    console.log(err);
  }
};
export const fetchTodoById = id => async dispatch => {
  const res = await axios.get(`/api/todos/${id}`);
  dispatch({
    type: FETCH_TODO_BY_ID,
    payload: res.data
  });
};

export const updateTodo = (id, text, done) => async dispatch => {
  await axios.patch(`/api/todos/${id}`, { text, done });
  dispatch({
    type: UPDATE_TODO
  });
};

export const createTodo = (name, email, text) => dispatch => {
  return axios.post('/api/todos', { name, email, text })
    .then(res => {
      dispatch({ type: CREATE_TODO, payload: res.data });
    })
    .catch(err => console.log(err));
};

export const login = (username, password) => dispatch => {
  if (username === 'admin' && password === '123') {
    dispatch({ type: LOGIN_SUCCESS });
  } else {
    dispatch({ type: LOGIN_FAIL });
  }
};

export const logout = () => dispatch => {
  dispatch({ type: LOGOUT });
};
'''

file frontend\src\actions\types.js
'''
export const FETCH_TODOS = 'FETCH_TODOS';
export const FETCH_TODO_BY_ID = 'FETCH_TODO_BY_ID';
export const UPDATE_TODO = 'UPDATE_TODO';
export const CREATE_TODO = 'CREATE_TODO';
export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';
export const LOGOUT = 'LOGOUT';
'''

file frontend\src\components\AdminPanel.js
'''
import React, { useState } from 'react';

const AdminPanel = ({ onLogin, onLogout, isAdmin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = e => {
    e.preventDefault();
    onLogin(username, password);
    setUsername('');
    setPassword('');
  };

  return (
    <div className="admin-panel">
      {isAdmin && <button onClick={onLogout}>Logout</button>}
      {!isAdmin && (
        <form onSubmit={handleLogin}>
          <div>
            <label htmlFor="username">Username: </label>
            <input type="text" id="username" value={username} onChange={e => setUsername(e.target.value)} required />
          </div>
          <div>
            <label htmlFor="password">Password: </label>
            <input type="password" id="password" value={password} onChange={e => setPassword(e.target.value)} required />
          </div>
          <button type="submit">Login</button>
        </form>
      )}
    </div>
  );
};

export default AdminPanel;
'''

file frontend\src\components\AdminTodoForm.js
'''
import React, { useState } from 'react';
import axios from 'axios';
import { useDispatch } from 'react-redux';
import { UPDATE_TODO } from '../actions/types';

const AdminTodoForm = ({ todo }) => {
  const dispatch = useDispatch();
  const [text, setText] = useState(todo.text);
  const [done, setDone] = useState(todo.done);

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.patch(`/api/todos/${todo.id}`, { text, done });
      dispatch({
        type: UPDATE_TODO
      });
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>{todo.name}</h3>
      <p>{todo.email}</p>
      <input
        type="text"
        value={text}
        onChange={e => setText(e.target.value)}
      />
      <label>
        Done?
        <input
          type="checkbox"
          checked={done}
          onChange={e => setDone(e.target.checked)}
        />
      </label>
      <button type="submit">Save</button>
    </form>
  );
};

export default AdminTodoForm;
'''

file frontend\src\components\App.js
'''
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import TodoList from './TodoList';
import TodoForm from './TodoForm';
import TodoDetails from './TodoDetails';

const App = () => (
  <Router>
    <Switch>
      <Route exact path="/" component={TodoList} />
      <Route exact path="/create-todo" component={TodoForm} />
      <Route path="/todos/:id" component={TodoDetails} />
    </Switch>
  </Router>
);

export default App;
'''

file frontend\src\components\TodoDetails.js
'''
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTodoById, updateTodo } from '../actions/todosActions';
import AdminTodoForm from './AdminTodoForm';
import { useHistory } from 'react-router-dom';

const TodoDetails = ({ match }) => {
  const { id } = match.params;
  const dispatch = useDispatch();
  const todo = useSelector(state => state.todos.todo);
  const isAdmin = useSelector(state => state.todos.isAdmin);
  const [text, setText] = useState(todo.text || "");
  const [done, setDone] = useState(todo.done || false);
  const history = useHistory();

  useEffect(() => {
    dispatch(fetchTodoById(id));
  }, [dispatch, id]);

  useEffect(() =>{
    setText(todo.text);
    setDone(todo.done);
  }, [todo]);

  const handleSubmit = e => {
    e.preventDefault();
    dispatch(updateTodo(todo.id, text, done));
    history.push('/');
  };

  return (
    <div className='container'>
      <h2>Task Details:</h2>
        <form onSubmit={handleSubmit} className="todo-details">
          <h3>{todo.name}</h3>
          <p>{todo.email}</p>
          <input
            type="text"
            value={text}
            onChange={e => setText(e.target.value)}
            className="todo-input"
          />
          <label>
            Done?
            <input
              type="checkbox"
              checked={done}
              onChange={e => setDone(e.target.checked)}
              className="todo-checkbox"
            />
          </label>
          <button type="submit" className="btn-primary">Save</button>
        </form>
        {isAdmin ? (
            <AdminTodoForm class="admin-todo-form" todo={todo} />
          ) : (
            <div>
              <h3>{todo.name}</h3>
              <p>{todo.email}</p>
              <p>{todo.text}</p>
              <p>{todo.done ? 'Done' : 'Not Done'}</p>
            </div>
          )}
    </div>
  );
};

export default TodoDetails;
'''

file frontend\src\components\TodoForm.js
'''
import React, { useState } from 'react';
import { connect } from 'react-redux';
import { createTodo } from '../actions/todosActions';

const TodoForm = ({ createTodo, history }) => { // добавляем history в пропсы
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [text, setText] = useState('');

  const onSubmit = e => {
    e.preventDefault();
    createTodo(name, email, text);
    setName('');
    setEmail('');
    setText('');
    history.push('/'); // переход на главную страницу
  };

  return (
    <div className='container'>
      <form onSubmit={onSubmit} className="todo-form">
        <div>
          <label htmlFor="name">Name</label>
          <input className="todo-input" type="text" id="name" value={name} onChange={e => setName(e.target.value)} required />
        </div>
        <div>
          <label htmlFor="email">Email</label>
          <input className='todo-input' type="email" id="email" value={email} onChange={e => setEmail(e.target.value)} required />
        </div>
        <div>
          <label htmlFor="text">Text</label>
          <input className='todo-input' type="text" id="text" value={text} onChange={e => setText(e.target.value)} required />
        </div>
        <button className='btn-primary' type="submit">Add Todo</button>
      </form>
    </div>
  );
};

export default connect(null, { createTodo })(TodoForm);
'''

file frontend\src\components\TodoList.js
'''
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTodos } from '../actions/todosActions';
import { Link } from 'react-router-dom';
import AdminPanel from './AdminPanel';
import AdminTodoForm from './AdminTodoForm';

const TodoList = () => {
  const dispatch = useDispatch();
  const todos = useSelector(state => state.todos.todos);
  const [currentPage, setCurrentPage] = useState(1);
  const [nameSort, setNameSort] = useState(false);
  const [emailSort, setEmailSort] = useState(false);
  const [statusSort, setStatusSort] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);

  useEffect(() => {
    dispatch(fetchTodos(currentPage, nameSort ? 'name' : 'id', nameSort ? 'asc' : 'desc'));
  }, [dispatch, currentPage, nameSort]);

  const currentTodos = todos

  const totalPages = Math.ceil(todos.length);
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }

  const handlePageClick = e => {
    setCurrentPage(Number(e.target.id));
  };

  const handleNameSort = () => {
    setNameSort(!nameSort);
    setEmailSort(false);
    setStatusSort(false);
    setCurrentPage(1);
  };

  const handleEmailSort = () => {
    setEmailSort(!emailSort);
    setNameSort(false);
    setStatusSort(false);
    setCurrentPage(1);
  };

  const handleStatusSort = () => {
    setStatusSort(!statusSort);
    setNameSort(false);
    setEmailSort(false);
    setCurrentPage(1);
  };

  const handleLogin = (username, password) => {
    if (username === 'admin' && password === '123') {
      setIsAdmin(true);
    }
  };

  const handleLogout = () => {
    setIsAdmin(false);
  };

  return (
    <div className='container'>
      <h2>Todo List</h2>
      <AdminPanel class="admin-todo-form" onLogin={handleLogin} onLogout={handleLogout} isAdmin={isAdmin} />
      <Link className="btn-primary" to="/create-todo">Create Todo</Link>
      <table>
        <thead>
          <tr>
            <th className='sort-name' onClick={handleNameSort}>Name</th>
            <th className='sort-email' onClick={handleEmailSort}>Email</th>
            <th>Description</th>
            <th className='sort-status' onClick={handleStatusSort}>Status</th>
            {isAdmin && <th className="edit-column">Edit</th>}
          </tr>
        </thead>
        <tbody>
          {currentTodos.map(todo => (
            <tr key={todo.id}>
              <td>{todo.name}</td>
              <td>{todo.email}</td>
              <td><Link to={`/todos/${todo.id}`}>{todo.text}</Link></td>
              <td>{todo.done ? 'Done' : 'Not Done'}</td>
              {isAdmin && (
                <>
                  <td className="edit-column"><Link to={`/todos/${todo.id}`}>Edit</Link></td>
                  <AdminTodoForm class="admin-todo-form" todo={todo} />
                </>
              )}
            </tr>
          ))}
        </tbody>
      </table>
      <div className='paginate'>
        {pageNumbers.map(number => (
          <span key={number} id={number} onClick={handlePageClick}>{number}</span>
        ))}
      </div>
    </div>
  );
};

export default TodoList;
'''

file frontend\src\components\TodoListItem.js
'''
import React from 'react';
import { Link } from 'react-router-dom';
const TodoListItem = ({ todo }) => {
  const isAdmin = useSelector(state => state.todos.isAdmin);

  return (
    <tr>
      <td>{todo.name}</td>
      <td>{todo.email}</td>
      <td><Link to={`/todos/${todo.id}`}>{todo.text}</Link></td>
      <td>{todo.done ? 'Done' : 'Not Done'}</td>
      {isAdmin && <td className="edit-column"><Link to={`/todos/${todo.id}`}>Edit</Link></td>}
    </tr>
  );
};

export default TodoListItem;
'''

file frontend\src\reducers\rootReducer.js
'''
import { combineReducers } from 'redux';
import todosReducer from './todosReducer';

const rootReducer = combineReducers({
  todos: todosReducer
});

export default rootReducer;
'''

file frontend\src\reducers\todosReducer.js
'''
import {
  FETCH_TODOS,
  FETCH_TODO_BY_ID,
  UPDATE_TODO,
  CREATE_TODO,
  LOGIN_SUCCESS,
  LOGOUT
} from '../actions/types';

const initialState = {
  todos: [],
  todo: {},
  currentPage: 1,
  totalPages: 0,
  isAdmin: false
};

const todosReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_TODOS:
      return {
        ...state,
        todos: action.payload.data,
        currentPage: action.payload.page,
        totalPages: Math.ceil(action.payload['totalCount'] / 3)
      };
    case FETCH_TODO_BY_ID:
      return {
        ...state,
        todo: action.payload
      };
    case UPDATE_TODO:
      return state;
    case CREATE_TODO:
      return {
        ...state,
        todos: [action.payload, ...state.todos]
      };
    case LOGIN_SUCCESS:
      return {
        ...state,
        isAdmin: true
      };
    case LOGOUT:
      return {
        ...state,
        isAdmin: false
      };
    default:
      return state;
  }
};

export default todosReducer;
'''

file frontend\src\store\configureStore.js
'''
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from '../reducers/rootReducer';

const configureStore = () => {
  const store = createStore(rootReducer, applyMiddleware(thunk));
  return store;
};
 
export default configureStore;
'''

